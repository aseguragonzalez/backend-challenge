name: CI

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run pre-commit
      run: pre-commit run --all-files

    - name: Run tests
      env:
        DOCKER_HOST: unix:///var/run/docker.sock
      run: pytest --cov=src --cov-report=xml --cov-report=term-missing:skip-covered --junitxml=pytest-report.xml
      continue-on-error: true

    - name: Install xml2js for GitHub Script
      run: npm install xml2js

    - name: Post test results as a PR comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const xml2js = require('xml2js');

          async function findPreviousComment() {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            return comments.find(comment => comment.user.login === "github-actions[bot]");
          }

          async function deletePreviousComment(comment) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
            });
          }

          const reportPath = 'pytest-report.xml';
          if (!fs.existsSync(reportPath)) {
            console.log("No report found. Skipping comment.");
            return;
          }

          const xmlData = fs.readFileSync(reportPath, 'utf8');
          const parser = new xml2js.Parser();
          const result = await parser.parseStringPromise(xmlData);

          const testsuite = result.testsuites.testsuite[0];
          const total = parseInt(testsuite.$.tests, 10);
          const failures = parseInt(testsuite.$.failures, 10);
          const errors = parseInt(testsuite.$.errors, 10);
          const skipped = parseInt(testsuite.$.skipped, 10);
          const time = testsuite.$.time;

          let comment = `### 🧪 Pytest Results\n\n`;
          comment += `- **Total Tests:** ${total}\n`;
          comment += `- ✅ Passed: ${total - failures - errors - skipped}\n`;
          comment += `- ❌ Failed: ${failures}\n`;
          comment += `- ⚠️ Errors: ${errors}\n`;
          comment += `- ⏩ Skipped: ${skipped}\n`;
          comment += `- ⏱ Duration: ${time} seconds\n\n`;

          let failureDetails = "";
          if (failures > 0 || errors > 0) {
            const failedTests = testsuite.testcase
              .filter(tc => tc.failure || tc.error)
              .map(tc => `- ❌ **${tc.$.name}** (${tc.$.classname})`);

            failureDetails = `### ❌ Failed Tests\n` + failedTests.join("\n") + "\n\n";
            comment += failureDetails;
            comment += `⚠️ **Some tests failed. Please check the logs for more details.**\n`;
          } else {
            comment += `✅ **All tests passed successfully!** 🎉\n`;
          }

          // Find and remove previous bot comment
          const previousComment = await findPreviousComment();
          if (previousComment) {
            await deletePreviousComment(previousComment);
          }

          // Post the new comment
          await github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

          // Fail the CI if there are failures
          if (failures > 0 || errors > 0) {
            process.exit(1);
          }

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: true
        format: markdown
        output: both
        hide_complexity: true

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
